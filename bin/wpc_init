#!/bin/sh
set -e

if test ${1}X = X; then
  echo 'Usage: wpc_init name-of-project'
  exit 1
fi

makedir() {
  echo "-> Creating directory ${1}"
  mkdir -p ${1}
}

creating() {
  echo "-> Creating ${1}"
  cat > ${1}
  chmod 755 ${1}
}

makedir bin
makedir setup
makedir setup/content

REPLACEMENT=`echo ${1} | perl -pe 'chomp;s/[^A-Za-z0-9_-]/_/g'`

creating docker-compose.yml <<'END'
version: "3"

volumes:
  mysql_data_!!!PROJECTNAME!!!:

services:
  mailcatcher:
    image: schickling/mailcatcher
    ports:
      - "1080:1080"

  beanstalk:
    image: schickling/beanstalkd
    ports:
      - "11300:11300"

  beanstalkd_console:
    image: agaveapi/beanstalkd-console
    ports:
      - "2080:80"
    environment:
      BEANSTALKD_HOST: beanstalk
      BEANSTALKD_PORT: 11300

  mysql:
    image: mysql
    ports:
      - "3306:3306"
    volumes:
      - mysql_data_!!!PROJECTNAME!!!:/var/lib/mysql
    environment:
      MYSQL_DATABASE: wordpress
      MYSQL_ROOT_PASSWORD: foobar

  wordpress:
    image: thedxw/wpc-wordpress
    ports:
      - "80:80"
    links:
      - mysql
      - mailcatcher
      - beanstalk
    volumes:
      - .:/usr/src/app
      - ./wp-content:/var/www/html/wp-content
END

perl -pi -e 's/!!!PROJECTNAME!!!/'${REPLACEMENT}'/g' docker-compose.yml

creating bin/wp <<'END'
#!/bin/sh
set -e

FLAGS=

# Add -t flag iff STDIN is a TTY
if [ -t 0 ]; then
  FLAGS=-t
fi

CONTAINER=`docker-compose ps -q wordpress`

# We can't use docker-compose here because `docker-compose exec` is equivalent
# to `docker exec -ti` and `docker-compose exec -T` is equivalent to
# `docker exec`. There is no docker-compose equivalent to `docker exec -i`.
#
# Issue: https://github.com/docker/compose/issues/3352

docker exec -i ${FLAGS} ${CONTAINER} wp ${@}
END

creating bin/console <<'END'
#!/bin/sh
set -e

exec docker-compose exec wordpress bash
END

creating bin/setup <<'END'
#!/bin/sh
#
# Runs all site setup scripts
set -e

`dirname $0`/../setup/external.sh
docker-compose exec wordpress /usr/src/app/setup/internal.sh
END

creating setup/external.sh <<'END'
#!/bin/sh
set -e

##
## This code will be run during setup, OUTSIDE the container.
##
## Because `whippet` running inside the container wouldn't be able to connect
## to private repositories.
##

whippet deps install
END

creating setup/internal.sh <<'END'
#!/bin/sh
set -e

##
## This code will be run during setup, INSIDE the container.
##

##############
#Â Config
##############
title=your_site_title
theme=your-theme-slug
plugins="a-space-separated list-of plugins-to-activate"
content=/usr/src/app/setup/content

wp core install --skip-email --admin_user=admin --admin_password=admin --admin_email=admin@localhost.invalid --url=http://localhost --title=$title

for plugin in $plugins
do
  if wp plugin is-installed $plugin
  then
    wp plugin activate $plugin
  else
    echo "\033[96mWarning:\033[0m Plugin '"$plugin"' could not be found. Have you installed it?"
  fi
done

if wp theme is-installed $theme
then
  wp theme activate $theme
else
  echo "\033[96mWarning:\033[0m Theme '"$theme"' could not be found. Have you installed it?"
fi

if [ "$(ls -A $content)" ]
then
  if wp plugin is-installed wordpress-importer
  then
    wp plugin activate wordpress-importer
    for file in $content/*.xml
    do
      echo "Importing $file..."
      wp import $file --authors=skip
    done
  else
    echo "\033[96mWarning:\033[0m Cannot import content as wordpress-importer plugin is not installed"
  fi
else
  echo "No content to be imported"
fi

END
